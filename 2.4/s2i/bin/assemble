#!/bin/bash

set -e

source ${HTTPD_CONTAINER_SCRIPTS_PATH}/common.sh

echo "---> Enabling s2i support in httpd24 image"

config_s2i

echo "---> pulling artifacts from GitHub"
python << END
import os
import shutil
import requests
wheels_check = []
base_path = "https://api.github.com/repos/AICoE/tensorflow-wheels/releases"
while base_path:
    releases = requests.get(base_path)
    for next_link in releases.headers.get("Link").split(","):
        if 'rel="next"' in next_link.split(";")[1]:
            base_path = next_link.split(";")[0].strip("< >")
            break
        base_path = None
    if releases.status_code == 200:
        for release in releases.json():
            tf_release_attr = release.get("name").split("/")
            if len(tf_release_attr) > 2:
                osver = "/".join([tf_release_attr[0],tf_release_attr[2]])
            else:
                osver = tf_release_attr[0]
            # manylinux2010 whls are released to centos6 tag
            osver = osver.replace('centos6','manylinux2010')
            for asset in release.get("assets", []):
                asset_name = asset.get("name")
                # HotFix: Need to remove later, once fixed on AICOE/tensorflow-wheels
                if 'torch' in asset_name:
                    continue
                branch_endpoint = "simple/tensorflow/"
                if "tensorflow_serving_api" in asset_name:
                    if "jemalloc" in osver:
                        branch_endpoint = "simple/tensorflow-serving-api/"
                    elif "cpu" in release.get("tag_name"):
                        branch_endpoint = "jemalloc/simple/tensorflow-serving-api/"
                    # TODO: HotFix, Not the best solution as cuda version can change!
                    elif "gpu" in release.get("tag_name"):
                        branch_endpoint = (
                            "cuda10.0+jemalloc/simple/tensorflow-serving-api/"
                        )
                release_path = os.path.join(
                    os.getcwd(), "index", osver, branch_endpoint
                )
                if "manylinux2010" not in osver:
                    asset["name"] = asset["name"].replace("-linux_", "-manylinux1_")
                wheel_file_path = os.path.join(release_path, asset["name"])
                if asset_name == "build_info.yaml" or asset_name == "build_info.json":
                    continue
                elif asset_name == "tensorflow_model_server":
                    continue  # TODO
                elif ".rpm" in asset_name:
                    continue  # TODO
                elif wheel_file_path not in wheels_check:
                    if not os.path.exists(release_path):
                        os.makedirs(release_path)
                    r = requests.get(asset.get("browser_download_url"), stream=True)
                    if r.status_code == 200:
                        with open(wheel_file_path, "wb") as f:
                            r.raw.decode_content = True
                            shutil.copyfileobj(r.raw, f)
                    wheels_check.append(wheel_file_path)
END
cp -Rf /tmp/src/. ./

process_extending_files ${HTTPD_APP_ROOT}/src/httpd-post-assemble/ ${HTTPD_CONTAINER_SCRIPTS_PATH}/post-assemble/

# Fix source directory permissions
fix-permissions ./
